hello-world:
  name: "Hello World"
  code: "fn main(x : Field, y : pub Field) {\n    constrain x != y;\n}"
  inputs: "{\"x\": 100, \"y\": 50}"

sudoku:
  name: "Sudoku"
  code: "global TOTAL_ELEMENTS = 81;\nglobal ROW_COL_SIZE = 9;\nglobal SUB_MATRIX_SIZE = 3;\n\nfn main(solution : [Field; TOTAL_ELEMENTS], filled_blocks : [Field; TOTAL_ELEMENTS]) {\n    for idx in 0..TOTAL_ELEMENTS {\n        if filled_blocks[idx] != 0 {\n            assert (filled_blocks[idx] == solution[idx]);\n        }\n    }\n\n    for row in 0..ROW_COL_SIZE {\n\n        let mut row_contraints = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n        for col in 0..ROW_COL_SIZE {\n            let elem_idx = row * ROW_COL_SIZE + col;\n            let elem = solution[elem_idx];\n\n            for idx in 0..ROW_COL_SIZE {\n                if idx == elem - 1 {\n                    row_contraints[idx] = 1;\n                }\n            }\n        }\n\n        let all = row_contraints.all(|a| a == 1);\n        assert (all);\n    }\n\n    for col in 0..ROW_COL_SIZE {\n\n        let mut col_contraints = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n        for row in 0..ROW_COL_SIZE {\n            let elem_idx = row * ROW_COL_SIZE + col;\n            let elem = solution[elem_idx];\n\n            for idx in 0..ROW_COL_SIZE {\n                if idx == elem - 1 {\n                    col_contraints[idx] = 1;\n                }\n            }\n        }\n\n        let all = col_contraints.all(|a| a == 1);\n        assert (all);\n    }\n\n    let mut sub_matrix_row_mover = 0;\n    let mut sub_matrix_col_mover = 0;\n\n    for i in 0..SUB_MATRIX_SIZE {\n        let mut sub_matrix_contraints = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n        for row in sub_matrix_row_mover..sub_matrix_row_mover+3 {\n            for col in sub_matrix_col_mover..sub_matrix_col_mover+3 {\n                let elem_idx = row * ROW_COL_SIZE + col;\n                let elem = solution[elem_idx];\n\n                for idx in 0..ROW_COL_SIZE {\n                    if idx == elem - 1 {\n                        sub_matrix_contraints[idx] = 1;\n                    }\n                }\n            }\n        }\n\n        let all = sub_matrix_contraints.all(|a| a == 1);\n\n        assert (all);\n\n        sub_matrix_row_mover += SUB_MATRIX_SIZE * i;\n        sub_matrix_col_mover += SUB_MATRIX_SIZE * i;\n    }\n\n}"
  inputs: "\n{\n  \"filled_blocks\": [\n    0,\n    2,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    8,\n    0,\n    0,\n    2,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    8,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    8,\n    0,\n    3,\n    0,\n    0,\n    7,\n    0,\n    0,\n    7,\n    0,\n    0,\n    0,\n    8,\n    0,\n    3,\n    0\n  ],\n  \"solution\": [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    7,\n    8,\n    9,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    1,\n    2,\n    3,\n    3,\n    1,\n    2,\n    8,\n    4,\n    5,\n    9,\n    6,\n    7,\n    6,\n    9,\n    7,\n    3,\n    1,\n    2,\n    8,\n    4,\n    5,\n    8,\n    4,\n    5,\n    6,\n    9,\n    7,\n    3,\n    1,\n    2,\n    2,\n    3,\n    1,\n    5,\n    7,\n    4,\n    6,\n    9,\n    8,\n    9,\n    6,\n    8,\n    2,\n    3,\n    1,\n    5,\n    7,\n    4,\n    5,\n    7,\n    4,\n    9,\n    6,\n    8,\n    2,\n    3,\n    1\n  ]\n}\n"

test:
  name: "Sample Test"
  code: "fn add(x: u64, y: u64) -> u64 {\n    x + y\n}\n\n#[test]\nfn test_add() {\n    assert (add(2,2) == 4);\n    assert (add(0,1) == 1);\n    assert (add(1,0) == 1);\n}"
  inputs: "{\"x\": 100, \"y\": 100}"

